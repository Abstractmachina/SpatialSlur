using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SpatialSlur.SlurCore;

/*
 * Notes
 */ 

namespace SpatialSlur.SlurMesh
{
    /// <summary>
    /// Various static methods for exporting and importing mesh data.
    /// </summary>
    public static class HeMeshIO
    {
        private static string _objHeader = "# This .obj file was generated by SpatialSlur https://github.com/daveReeves/SpatialSlur";
        private static char[] _objSeparators = new char[]{ ' ', '\t', '\0' };
        private static char[] _objFaceSeparator = new char[] { '/' };


        /// <summary>
        /// Writes the given HeMesh to file in .obj format.
        /// </summary>
        /// <param name="mesh"></param>
        /// <param name="vertexPositions"></param>
        /// <param name="path"></param>
        public static void WriteObj(HeMesh mesh, IReadOnlyList<Vec3d> vertexPositions, string path)
        {
            WriteObj(mesh, vertexPositions, null, null, path);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="mesh"></param>
        /// <param name="vertexPositions"></param>
        /// <param name="vertexNormals"></param>
        /// <param name="textureCoords"></param>
        /// <param name="path"></param>
        public static void WriteObj(HeMesh mesh, IReadOnlyList<Vec3d> vertexPositions, IReadOnlyList<Vec3d> vertexNormals, IReadOnlyList<Vec2d> textureCoords, string path)
        {
            var verts = mesh.Vertices;
            var faces = mesh.Faces;

            using (var writer = new StreamWriter(path, false, Encoding.ASCII))
            {
                writer.WriteLine(_objHeader);
                writer.WriteLine();

                // write vertices
                for (int i = 0; i < verts.Count; i++)
                {
                    var v = verts[i];
                    if (v.IsUnused) continue;
                    Vec3d p = vertexPositions[i];
                    writer.WriteLine("v {0} {1} {2}", p.x, p.y, p.z);
                }

                // write uvs
                if (textureCoords != null)
                {
                    for (int i = 0; i < verts.Count; i++)
                    {
                        if (verts[i].IsUnused) continue;
                        Vec2d uv = textureCoords[i];
                        writer.WriteLine("vt {0} {1}", uv.x, uv.y);
                    }
                }

                // write normals
                if (vertexNormals != null)
                {
                    for (int i = 0; i < verts.Count; i++)
                    {
                        if (verts[i].IsUnused) continue;
                        Vec3d n = vertexNormals[i];
                        writer.WriteLine("vn {0} {1} {2}", n.x, n.y, n.z);
                    }
                }

                // write faces
                for (int i = 0; i < faces.Count; i++)
                {
                    var f = faces[i];
                    if (f.IsUnused) continue;

                    writer.Write("f");
                    foreach (var v in f.Vertices)
                        writer.Write(" {0}/{0}/{0}", v.Index + 1);

                    writer.WriteLine();
                }
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="vertexPositions"></param>
        /// <returns></returns>
        public static HeMesh ReadObj(string path, out List<Vec3d> vertexPositions)
        {
            var mesh = new HeMesh();
            var verts = mesh.Vertices;
            var faces = mesh.Faces;

            vertexPositions = new List<Vec3d>();

            using (var reader = new StreamReader(path, Encoding.ASCII))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    // skip empty lines and comments
                    if (line.Length == 0 || line[0] == '#') continue;

                    // check the first character
                    var segments = line.Split(_objSeparators, StringSplitOptions.RemoveEmptyEntries);
                    switch (segments[0])
                    {
                        case "v":
                            {
                                // parse vertex
                                double x = double.Parse(segments[1]);
                                double y = double.Parse(segments[2]);
                                double z = double.Parse(segments[3]);

                                
                                verts.Add();
                                vertexPositions.Add(new Vec3d(x, y, z));
                                break;
                            }
                        case "f":
                            {
                                // parse face
                                List<int> face = new List<int>();
                                for (int i = 1; i < segments.Length; i++)
                                {
                                    var ids = segments[i].Split(_objFaceSeparator);
                                    face.Add(int.Parse(ids[0]) - 1);
                                }

                                faces.Add(face);
                                break;
                            }
                    }
                }
            }

            return mesh;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="vertexPositions"></param>
        /// <param name="vertexNormals"></param>
        /// <returns></returns>
        public static HeMesh ReadObj(string path, out List<Vec3d> vertexPositions, out List<Vec3d> vertexNormals)
        {
            // TODO
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="vertexPositions"></param>
        /// <param name="vertexNormals"></param>
        /// <param name="textureCoords"></param>
        /// <returns></returns>
        public static HeMesh ReadObj(string path, out List<Vec3d> vertexPositions, out List<Vec3d> vertexNormals, out List<Vec2d> textureCoords)
        {
            // TODO
            throw new NotImplementedException();
        }
    }
}
